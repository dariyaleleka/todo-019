{"version":3,"sources":["App.js","serviceWorker.js","store/reducer.js","index.js"],"names":["App","react_default","a","createElement","className","Component","Boolean","window","location","hostname","match","initState","tasks","name","done","remove","user","__webpack_require__","d","__webpack_exports__","ADD_NEW_TASK","DONE_TASK","store","createStore","state","arguments","length","undefined","action","console","log","type","Object","objectSpread","concat","toConsumableArray","payload","map","el","i","__REDUX_DEVTOOLS_EXTENSION__","getState","ReactDOM","render","es","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mQAeeA,0LAVX,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cAChBH,EAAAC,EAAAC,cAAA,oCALQE,cCSEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,6FChBAC,EAAY,CACdC,MAAO,CACH,CAACC,KAAM,UAAWC,MAAK,EAAOC,QAAO,IAEzCC,KAAM,MCNVC,EAAAC,EAAAC,EAAA,iCAAAC,IAAAH,EAAAC,EAAAC,EAAA,8BAAAE,IAUO,IAAMD,EAAe,eACfC,EAAY,YAGnBC,EAAQC,YDLS,WAA4B,IAA3BC,EAA2BC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAArBd,EAAUiB,EAAWH,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EAI/C,OAFAE,QAAQC,IAAIF,GAEJA,EAAOG,MACX,KAAKX,EACD,OAAOY,OAAAC,EAAA,EAAAD,CAAA,GACAR,EADP,CACcZ,MAAK,GAAAsB,OAAAF,OAAAG,EAAA,EAAAH,CAAMR,EAAMZ,OAAZ,CAAmB,CAACC,KAAMe,EAAOQ,QAAStB,MAAK,EAAOC,QAAO,OAEpF,KAAKM,EACD,OAAOW,OAAAC,EAAA,EAAAD,CAAA,GAEAR,EAFP,CAEcZ,MAAOY,EAAMZ,MAAMyB,IAAI,SAACC,EAAIC,GAAL,OAAWX,EAAOQ,UAAYG,EAAnBP,OAAAC,EAAA,EAAAD,CAAA,GAAyBM,EAAzB,CAA6BxB,MAAK,IAAMwB,MAQhG,OAAOd,GCfwBjB,OAAOiC,8BAAgCjC,OAAOiC,gCAEjFX,QAAQC,IAAIR,EAAMmB,YAElBC,IAASC,OACP1C,EAAAC,EAAAC,cAACyC,EAAA,EAAD,CAAUtB,MAAOA,GAClBrB,EAAAC,EAAAC,cAAC0C,EAAD,OACcC,SAASC,eAAe,SF4GjC,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.507f362a.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h1>Task manager </h1>\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {ADD_NEW_TASK, DONE_TASK, REMOVE_TASK} from \"../index\";\n\nconst initState = {\n    tasks: [\n        {name: \"Wake up\", done:false, remove:false}\n    ],\n    user: null\n};\n\nexport const reducer = (state=initState,action) => {\n\n    console.log(action);\n\n    switch (action.type) {\n        case ADD_NEW_TASK:\n            return {\n                ...state, tasks: [...state.tasks, {name: action.payload, done:false, remove:false}]\n            };\n        case DONE_TASK:\n            return {\n                // ...state, tasks: state.tasks\n                ...state, tasks: state.tasks.map((el, i) => action.payload === i?{...el, done:true}:el)\n            };\n        // case REMOVE_TASK:\n        //     return {\n        //         // ...state, tasks: state.tasks\n        //         ...state, tasks: state.tasks.map((el, i) => action.payload === i?{...el, remove:true}:el)\n        //     };\n    }\n    return state;\n};","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport {createStore} from \"redux\";\nimport {Provider} from 'react-redux';\nimport {reducer} from \"./store/reducer\";\n\nexport const ADD_NEW_TASK = \"ADD_NEW_TASK\";\nexport const DONE_TASK = \"DONE_TASK\";\n// export const REMOVE_TASK = \"REMOVE_TASK\";\n\nconst store = createStore(reducer, window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__());\n\nconsole.log(store.getState());\n\nReactDOM.render(\n  <Provider store={store}>\n\t<App />\n  </Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}